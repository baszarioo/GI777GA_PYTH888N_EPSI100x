CLASSES______________________________________
ex1:
class Cat:
    def __init__(self,color,legs):
        self.color=color
        self.legs = legs
felx=Cat("ginger",4)
rover=Cat("dog-colored",4)
stumpy=Cat("brown",3)


__init__ :
the most important method in a class.   #in other words called class constructor
all methods must have self as their first parameter.
ex:
class Cat:
    def __init__(self,color,legs):
        self.color=color
        self.legs=legs
felx=Cat("ginger", 4)
print(felix.color)  #Output:    ginger


class Student:
    def __init__ (self,name):
        self.name= name
test = Student("Bob")


++ METHODS:
ex:
class Dog:
    def __init__(self,name,color):
        self.name=name
        self.color=color
    def bark(self):
        print("Woof!")
fido=Dog("Fido", "brown")
print(fido.name)
fido.bark()     #Output:    Fido\n Woof!    // '\n'==new line- do not exist in actual output.


ex: * You are making videogame! *
class Player:
    def __init__(self,name,level):
        self.name=name
        self.level=level
    def intro(self):
        return f"{self.name} (Level {self.level})"
name=input("Enter player's name: ")
level=input("ENter player's level: ")
player=Player(name,int(level))
print(player.intro())
||
class Player:
    def __init__(self,name,level):
        self.name=name
        self.level=level
    def intro(self):
        print(self.name + " (Level "+ self.level +")")
name=input()
level=input()
palyer=Player(name,level)
player.intro()

INHERITANCE______________________________________
i.e.

class Animal:
	def __init__(self,name,color):
		self.name=name
		self.color=color
class Cat(Animal):
	def purr(self):
		print("Purr...")
class Dog(Animal):
	def bark(self):
		print("Woof!")
fido = Dog("Fido", "brown")
print(fido.color)
fido.bark()		#Output: brown\n Woof!


class A: 
	def method(self):
		print(1)
class B(A):
	def method(self):
		print(2)
B().method()		#Output: 2


but;
class A:
	def spam(self):
		print(1)
class B(A):
	def spam(self):
		print(2)
		super().spam()
B().spam()		#Output: 2\n 1



Shape-rectangle Inheritance exercise. ||
v1:
class Shape: 
	def __init__(self):
		pass
class Rectangle(Shape):
	def __init__(self, width, height):
		super().__init__()
		self.width = width
		self.height = height
	def area(self):
		return self.width * self.height
	def perimieter(self):
		return 2 * (self.width + self.height)
#usage:
rect=Rectangle(5,10)
print("Area:", rect.area())
print("Perimeter:", rect.perimeter())

||
v2:
class Shape:
	def __init__(self,w,h):
		self.width = w
		self.height = h
	def area(self):
		print(self.width*self.height)
class Rectangle(Shape):
	def perimeter(self):
		print(2*(w+h))
w = int(input())
h = int(input()))
r=Rectangle(w,h)
r.area()
r.perimeter()


MAGIC_METHODS______________________________________
EX:
class Vector2D:
	def __init__(self, x, y):
		self.x=x
		self.y=y
	def __add__(self,other):
		return Vector2D(self.x + other.x, self.y + other.y)
first = Vector2D(5,7)
second= Vector2D(3,9)
result=first+second
print(result.x)
print(result.y)		#OUTPUT: 8\n 16

# The __add__ method allows for the definition of a custom behaviour for the + operator in our class. // Returns a new object, containing the result.

#More magic_methods:
__sub__ for -
__mul__ for *
__truediv__ for /
__floordiv__ for //
__mod__ for %
__pow__ for **
__and__ for &
__xor__ for ^
__or__ for |


EX2:
class SpecialString:
    def __init__(self,cont):
        self.cont=cont
    def __truediv__(self,other):
        line="=" * len(other.cont)
            return "\n".join([self.cont, line, other.cont])
spam = SpecialString("spam")
hello =SpecialString("Hello world!")
print(spam / hello)     #Output:    spam\n =============\n Hello world!


/What is A() ^ B() evaluated as, if A doesn't implement any magic methods?/     # B().__rxor__(A())

#MagicMethodsForComparisons:
__lt__ for <
__le__ for <=
__eq__ for ==
__ne__ for !=
__gt__ for >
__ge__ for >=       #if __ne__ is not implemented, it returs the opposite of __eq__.

EX:
class SpecialString:
    def __init__(self,cont):
        self.cont=cont
    def __gt__(self,other):
        for index in range(len(other.cont)+1):
            result=other.cont[:index]+">"+self.cont
            result+=">"+other.cont[index:]
            print(result)
spam = SpecialString("spam")
eggs = SpecialString("eggs")
spam > eggs     #Output:  >spam>eggs\n  e>spam>ggs\n   eg>spam>gs\n    egg>spam>s\n   eggs>spam>


magic_methods_for_making_classes_act_like_containers/
__len__ for len()
__getitem__ for indexing
__setitem__ assigning indexed values
__delitem__ deleting indexed values
__iter__ iteration over objects (e.g. in for loops)
__contains__
EX:
import random
class VagueList:
    def __init__(self,cont):
        self.cont=cont
    def __getitem__(self,index);
        return self.cont[index + random.randint(-1,1)]
    def __len__(self):
        return random.randint(0, len(self.cont)*2)
vague_list = VagueList(["A", "B", "C", "D", "E"])
print(len(vague_list))
print(len(vague_list))
print(vague_list[2])
print(vague_list[2])    #OUTPUT:    0\n 8\n B\n D\n

magic method call made by x[y]=z?   #+> x.__setitem__(y, z)