1)
data = {
    'Singapore': 1,
    'Ireland': 6,
    'United Kingdom': 7,
    'Germany': 27,
    'Armenia': 34,
    'United States': 17,
    'Canada': 9,
    'Italy': 74
}
name=input()
rank=data.get(name, "Not Found")
print(rank)

2) 
fib={1:1, 2:1,, 3:2, 4:3}
print(fi .get(4,0)+fib.get(7, 5))
==> 8


////
contacts=[('James', 42), ('Michael', 24)]
name=input()
age=None
for contact in contacts:
	if contact[0]==name:
		age=contact[1]
		break
	if age is not None
		print(f"{name} is {age}")
	else:
		print("Not Found")
		
		
////TUPLE UNPACKING
def calc(x):
	perimeter=4*x
	area=x ** 2
	return(perimeter, area)
side = int(input())
p, a = calc(side)
print(str(p))
print(str(a))



////SETS ...
tbc//



LAMBDAS
-creating a function normally *def* assigns it to a variable with its name automatically. Lambda syntax - approach is most commonly used when passing a simple funtion as an argument to another function. The syntax is shown in the next example and consists of the lambda keyword followed by a list of arguments, a colon, and the expression to evaluate and return>
def my_func(f, arg):
	return f(arg)

my_func(lambda x: 2*x*x,5) ;;;	Functions created using the lambda syntax are known as anonymous.