map & filter:
___________________________	
-def add_five(x):
	return x+5
nums=[11, 22, 33, 44, 55]
result=list(map(add_five, nums))
print(result)		+> 	[16,27.38.49,60]

-by using lambda syntax;
nums=[11,22,33,44,55]
result=list(map(lambda x: x+5, nums))
print(result)

exL:
salaries = [2000,1800,3100,4400,1500]
bonus=int(input())
salaries=list(map(lambda x: x+bonus, salaries))
print(salaries)
_________________________
filter:
The function filter - filters an iterable by leaving only the items that match a condition(also called a predicate)/

np. \
nums=[11,22,33,44,55]
res=list(filter(lambda x: x%2==0, nums))
print(res)		+> [22, 44]


-all less than 5\
nums=[1,2,5,8,3,0,7]
res=list(filter(lambda x: x<5, nums))
print(res)
________________________________________________________
GENERATORS:
type of iterable, like lists or tuples. 
 - they dont allow indexing with arbitrary indices, but they still can be iterated through with for loops.
 - can be created using functions & yield statement.
 
ex:/
def countdown():
	i=5;
	while i>0:
		yield i
		i -= 1
for i in countdown():
	print(i)				= [ horizontal(poziom) 	vertical(pion) ] 54321 - printed line by line(vertically).
// The YIELD statement is used to define a generator, replacing the return of a function to provide a result to its caller without destroying local variables.


ex2:/ //Due to the fact that they yield one item at a time, generators don't have the memory restrictions of lists.
In fact, they can be infinite!
`def infinite_sevens():
	while True:
		yield 7
for i in infinite_sevens():
	print(i)		>>> 7777777777777777777777 ...	(Vertically).
	// In short, generators allow you to declare a function that behaves like an iterator, i.e. it can be used in a for loop.
	
def get_primes():
	num=2
	while True:
		if is_prime(num):
			yield num
			num += 1

// Finite generators can be converted into lists by passing them as arguments to the list function.
def  numbers(x):
	for i in range(x):
		if i % 2 == 0:
			yield i
print(list(numbers(11)))		+>	[0,2,4,6,8,10]
	
// Using generatros results in improved performance, which is the result of the lazy(on demand) generation of value, which translates to lower memory usage. Futhermore, we do not need to wait until all the elements have been generated before we start to use them.

FINDING PRIME NUMBERS using GENERATORS:
def isPrime(x):
	if x<2:
		return False
	elif x==2:
		return True
	for n in range(2, x):
		if x % n ==0:
			return False
	return True
def primeGenerator(start, end):
	for num in range(start, end+1):
		if isPrime(num):
			yield num
			
# Sample usage
for prime in primeGenerator(10,20):
	print(prime)

Should be the: 
	...
	def primeGenerator(a,b):
		for i in range(a, b): #there
			if isPrime(i):
				yield i
	f=int(input())
	t=int(input())
	print(list(primeGenerator(f, t)))
	

last exrc:
def make_word():
	word=""
	for ch in "spam":
		word+=ch
		yield word
print(list(make_word()))
=> ['s', 'sp', 'spa', 'spam']
_____________________________________________________________________________________
GENERATOR:
# Define the decorator
def invoice_decorator(func):
	def wrapper(num):
	print("***")
	func(num)
	print("***")
	print("END OF PAGE")
 return wrapper
@invoice_decorator
def invoice(num):
	print("INVOICE #" +num)
invoice(input());

||v

my_func = my_dec(my_func) ==	@my_dec
_______________________________________________________________________________
RECURSION PYTHON:
def factorial(x):
	if x == 1:
		return 1
	else: 
		return x*factorial(x-1)
print(factorial(5))

====
Ex2:
def is_even(x):
	if x==0:
		return True
	else:
		return is_odd(x-1)
def is_odd(x):
	return not is_even(x)
print(is_odd(17))
print(is_even(23)) => TRUE / FALSE.

/// return not ///
== return (not self.myReturnCode) == return not self.myReturnCode
it means = if the returncode is 0 -> returns true/ and if the returncode isn't 0 returns FAL.
== return False if self.myReturnCode else True.

1. If you call is_even(1), it checks if x is 0. Since x is not 0, it cals is_odd(1-1) which is is_odd(0).
2. The function is_odd(0) returns the opposite of is_even(0). Since is_even(0) return True (because 0 is even), is_odd(0) returns False.
3. Therefor, is_even(1) returns False, which correctly indicates that 1 is not an even number.
Now if you call is_odd(1):
1. It returns the opposite of is_even(1). As we determined above, is_even(1) returns False, so is_odd(1) returns True.
2. Therefore, is_odd(1) correctly indicates that 1 is an odd number.


======
Ex3:
def convert(num):
	if num == 0:
		return 0
	else: 
		return (num %2 + 10 * convert(num // 2))
print(convert(int(input())))

=== Ex4:	Fibonacci
def fib(x):
if x==0 or x == 1
	return 1
else: 
	return fib(x-1) + fib(x-2)
print(fib(4)) 		


________________________________________________________
*args and **kwargs PYTHON:
allows to pass an arbitrary number of arguments to function/ varying numbers of arguments.

EX:
def function(named_arg, *args):
	print(named_arg)
	print(args)
function(1,2,3,4,5)
OUTPUT:
1
(2,3,4,5)		//*args accessed as the == tuple args.

**kwargs (keyword arguments) = named arguemnts that you haave not defined in advance. It returns a dictionary [keys=arg. names, values = arg-s values].

def my_func(x, y=7, *args, **kwargs):
	print(kwargs)
my_func(2,3,4,5,6,a=7, b=8)
OUTPUT:
{'a': 7, 'b':8}	// arguments returned by **kwargs are not includced in *args.w


EX2: 
def my_min(x,y):
	if x<y:
		return x
	else:
		return y
print(my_min(8,13,4,42,120,7))
	//FIX:
def my_min(x,y,*args):
	min_val=x if x<y else y
	fro arg in args:
		if arg<min_val:
			min_val=arg
	return min_val
print(my_min(8,13,4,42,120,7))

________________________________________________________
MODULE: REVISION:
nums={1,2,3,4,5,6}
nums={0,1,2,3} & nums
nums=filter(lambda x:x>1, nums)
print(len(list(nums)))			+> 2


power math func example:
def power(x,y):
	if y==0:
		return 1
	else: 
		return x*power(x,y-1)
print(power(2,3))		+> 8


Anonymous function:
a=(lambda x: x*(x+1)) (6)
print(a)		


def fitler_even_numbers(nums):
    return [num for num in nums if num % 2 == 0]
nums = [1,2,8,3,7]
print(filter_even_numbers(nums)) # Output: [2, 8]..
||
nums = [1,2,8,3,7]
res = list(filter(lambda x: x%2==0, nums))
print(res)


def func(**kwargs):
    print(kwargs["zero"])
func(a=0, zero=8)       #Output: 8


#Which kekyword is used to return a value from a generator?
== yield.
____________________________________________________fin.
come back asp ðŸ˜¶ðŸ¥ 

